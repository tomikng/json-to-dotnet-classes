name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        python -m pytest test_json_to_csharp.py -v --tb=short

    - name: Run tests with coverage
      run: |
        pip install coverage
        coverage run -m pytest test_json_to_csharp.py
        coverage report
        coverage xml

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

  integration:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test CLI with sample data
      run: |
        echo '{"users": [{"id": 1, "name": "Test User", "email": "test@example.com", "isActive": true}], "count": 1}' > sample.json
        python json_to_csharp.py sample.json --output test_output --namespace TestApp.Models --root-class SampleDto
        
        # Verify files were generated
        test -f test_output/SampleDto.cs
        test -f test_output/User.cs
        
        # Verify content
        grep -q "namespace TestApp.Models" test_output/SampleDto.cs
        grep -q "public class SampleDto" test_output/SampleDto.cs
        grep -q "public List<User>? Users" test_output/SampleDto.cs
        grep -q "auto-generated" test_output/SampleDto.cs
        grep -q "github.com/tomikng/json-to-dotnet-classes" test_output/SampleDto.cs
        
        echo "✅ Integration test passed!"

    - name: Test with records
      run: |
        python json_to_csharp.py sample.json --records --output test_records --namespace TestApp.Records
        grep -q "public record RootDto" test_records/RootDto.cs
        echo "✅ Records test passed!"

    - name: Test error handling
      run: |
        # Test with non-existent file (should fail)
        if python json_to_csharp.py nonexistent.json; then
          echo "❌ Should have failed for non-existent file"
          exit 1
        else
          echo "✅ Correctly handled missing file"
        fi 